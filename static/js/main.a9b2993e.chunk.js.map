{"version":3,"sources":["constants/constants.js","socket/client.js","components/ImagesList.js","actions/viewListS3Item.js","actions/selectS3Item.js","container/ListContainer.js","App.js","reportWebVitals.js","reducers/reducer.js","index.js"],"names":["module","exports","VIEW_LIST_S3_ITEM","SELECT_S3_ITEM","PROTO","HOST","PORT","IMAGES_PATH","FILENAMES","Math","random","toString","substr","Dashboard","ImagesList","state","imageState","update","url","score_test","score_validation","filenames","axios","get","then","response","drifted","i","data","length","stateData","replace","setState","catch","err","console","log","this","fetchData","key","push","event","target","post","document","body","style","cursor","results","stateCopy","Object","create","keys","id","checkboxes","querySelectorAll","checkbox","checked","props","images","map","value","inputKey","className","src","alt","type","name","onChange","selectCheckbox","onClick","selectAllCheckBoxes","submitImages","React","Component","viewListS3Item","item","evaluate","items","stateDict","selectS3Item","ListContainer","connect","dispatch","onLoad","onSelect","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a9b2993e.chunk.js","sourcesContent":["const VIEW_LIST_S3_ITEM = \"VIEW_LIST_S3_ITEM\";\nconst SELECT_S3_ITEM = \"SELECT_S3_ITEM\";\nconst PROTO = \"http\";\nconst HOST = \"localhost\";\nconst PORT = 8080;\nconst IMAGES_PATH = \"http://localhost:8080/\";\nconst FILENAMES = [\n    \n];\n\nmodule.exports = {\n    VIEW_LIST_S3_ITEM,\n    SELECT_S3_ITEM,\n    PROTO,\n    HOST,\n    PORT,\n    IMAGES_PATH, \n    FILENAMES\n};","// Client\r\n\r\nimport React, { useState, useEffect } from \"react\"\r\nimport io from \"socket.io-client\"\r\n\r\nconst thisSessionId = Math.random().toString(36).substr(2, 9);\r\n\r\nfunction Dashboard(props) {\r\n  const elem = props.elem;\r\n  const [uploadProgress, setUploadProgress] = useState({percentage: 0})\r\n\r\n  useEffect(() => {\r\n    const socket = io(\"http://localhost:8041/\")\r\n    socket.emit('connectInit', thisSessionId);\r\n    socket.on(\"uploadProgress\", (data) => {\r\n      console.log(\"uploadProgress\");\r\n      setUploadProgress({percentage: data['percentage']}) // Data from progress added to state\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {uploadProgress ? (\r\n        <div className=\"progressBar\">\r\n          <div\r\n            className=\"progressBar__completed\"\r\n            style={{ width: `${uploadProgress.percentage}%` }}\r\n          >\r\n            <div className=\"progressBar__display\">\r\n              {uploadProgress.percentage !== 0 ? <em className=\"progressbar-display\">&nbsp;</em> : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"progressBar__display\">\r\n            {uploadProgress.percentage === 0 ? <em className=\"progressbar-display\">&nbsp;</em> : null}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;","import React from \"react\";\nimport { HOST, PORT, PROTO, IMAGES_PATH } from \"../constants/constants.js\";\nimport axios from 'axios';\nimport { FILENAMES } from \"../constants/constants.js\";\nimport Dashboard from \"../socket/client.js\"\n\n// define the data in the Presentation Component so that we update state once\n\nclass ImagesList extends React.Component {\n    static stateData = [];\n\n    state = {\n        imageState: null,\n        update: false,\n        url: \"\",\n        score_test: '0.00',\n        score_validation: '0.00',\n        filenames: []\n    }\n    \n    fetchData() {\n        axios.get(PROTO + \"://\" + HOST + \":\" + PORT + \"/backend/images/20\")\n            .then(response => {\n                var drifted = 0;\n                for(var i = 0; i < response.data['paths'].length; i++) {\n                    if (response.data.drifted[i] === 0) {\n                        drifted = 0;\n                    }\n                    else {\n                        drifted = 1;\n                    }\n                    ImagesList.stateData[ImagesList.stateData.length] = {\n                        \"image\": IMAGES_PATH + response.data['paths'][i],\n                        \"checked\": false,\n                        \"viewed\": false,\n                        \"drifted\": drifted,\n                        \"predicted\": \"Not yet known\",\n                        \"path\": response.data['paths'][i].replace(\"images/temp/\", \"\").replace(\"-resized\", \"\")\n                    };\n                }\n                this.setState({\n                    update: true\n                });\n                return response;\n            }).catch(err => {\n                console.log(err);\n            });\n\n    }\n\n    componentWillMount() {\n        this.fetchData();\n    }\n\n    componentDidMount() {\n        this.setState({\n            imageState: ImagesList.stateData\n        });\n    }\n\n    selectCheckbox(key) {\n        this.state.filenames.push(ImagesList.stateData[key]['path']);\n    }\n\n    submitImages(event) {\n        var ctx = event.target;\n        axios.post(PROTO + \"://\" + HOST + \":\" + PORT + \"/backend/drift/1000/10/face_aging\", {\n            \"filenames\": this.state.filenames\n        })\n        .then(response => {\n            document.body.style.cursor = \"wait\";\n            var results = response.data['predictions'];\n            var score_test = response.data['score_test'];\n            var score_validation = response.data['score_validation'];\n\n            if (ImagesList.stateData.length > 0) {\n                for (var state in ImagesList.stateData) {\n                    var stateCopy = Object.create(ImagesList.stateData[state], {});\n                    if (stateCopy['image'] in this.state.filenames) {\n                        ImagesList.stateData[state] = {\n                            \"image\": stateCopy['image'],\n                            \"checked\": stateCopy['checked'],\n                            \"viewed\": stateCopy['viewed'],\n                            \"drifted\": stateCopy['drifted'],\n                            \"predicted\": results[state]['y_pred_test'],\n                            \"path\": stateCopy['path']\n                        }\n                    } else {\n                        ImagesList.stateData[state] = {\n                            \"image\": stateCopy['image'],\n                            \"checked\": stateCopy['checked'],\n                            \"viewed\": stateCopy['viewed'],\n                            \"drifted\": stateCopy['drifted'],\n                            \"predicted\": \"Not yet known\",\n                            \"path\": stateCopy['path']\n                        }\n                    }\n                }\n                this.setState({\n                    imageState: ImagesList.stateData, \n                    score_test: score_test, \n                    score_validation: score_validation\n                });\n                console.log(score_test, score_validation);\n                document.body.style.cursor = \"default\";\n            }\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    selectAllCheckBoxes(keys) {\n        for (var id in keys) {\n            this.state.filenames.push(ImagesList.stateData[keys[id]]['path']);\n        }\n        var checkboxes = document.querySelectorAll(\".checkbox_images\");\n        for (const checkbox of checkboxes) {\n            if (checkbox.checked) {\n                checkbox.checked = false;\n            } else {\n                checkbox.checked = true;\n            }\n        }\n        return true;\n    }\n\n    render() {\n        var imageState = this.props.imageState; // stateDict\n        var images = null, keys = [];\n        for(var key in imageState) {\n            ImagesList.stateData[key] = imageState[key];\n        }\n        if(this.state.imageState) {\n            images = this.state.imageState.map((value, key) => {\n                var inputKey = \"checkbox\" + \"[\" + key.toString() + \"]\";\n                keys.push(key);\n                return (\n                    <div className=\"image-box image-grid-item\" key={key}>\n                        <div className=\"image-tile\">\n                            <img src={value['image']} alt=\"\" />\n                        </div>\n                        <div className=\"image-tile\">\n                            {value['path']}\n                        </div>\n                        <div className=\"image-checkbox\">\n                            <input type=\"checkbox\" className=\"checkbox_images\" name={inputKey} onChange={() => this.selectCheckbox(key)} />\n                        </div>\n                        <div className=\"image-caption\">\n                            <em>Drifted: {value['drifted']}, Prediction: {value['predicted']}</em>\n                        </div>\n                    </div>\n                );\n            });\n        }\n        return (\n            <div className=\"clearfix\">\n                <div className=\"row\">\n                    <h1 className=\"heading\">PREDICTING FACE IMAGE GRID FOR DRIFT</h1>\n                </div>\n                <div className=\"row\">\n                    <label>Select All <input type=\"checkbox\" name=\"Select_all\" value=\"1\" onClick={() => this.selectAllCheckBoxes(keys)} /></label>\n                </div>\n                <div className=\"row\">\n                    <button onClick={(event) => this.submitImages(event)}>Submit Image(s)</button>\n                </div>\n                <div className=\"row image-grid\">\n                    { images }\n                </div>\n                <div className=\"row\">\n                    Score Test (Accuracy): <em className=\"text-color-red\">{ this.state.score_test }</em>\n                </div>\n                <div className=\"row\">\n                    Score Validation (Accuracy): <em className=\"text-color-blue\">{ this.state.score_validation }</em>\n                </div>\n                <div className=\"row\">\n                    <button onClick={(event) => this.submitImages(event)}>Submit Image(s)</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport {\n    ImagesList\n};","import { VIEW_LIST_S3_ITEM } from \"../constants/constants.js\";\nimport { ImagesList } from '../components/ImagesList.js';\n\nconst viewListS3Item = (name) => {\n    return {\n        type: VIEW_LIST_S3_ITEM,\n        item: {\n            \"viewed\": true,\n            name: name\n        },\n        evaluate: function(items) {\n            var key = 0, stateCopy = null, stateDict = {};\n            for (var i = 0; i < items.length; i++) {\n                key = items[i];\n                stateCopy = ImagesList.stateData[key];\n                stateDict[key] = {\n                    \"image\": stateCopy[\"image\"],\n                    \"checked\": stateCopy[\"checked\"],\n                    \"viewed\": true,\n                    \"drifted\": stateCopy[\"drifted\"]\n                };\n            }\n            return stateDict;\n        }\n    };\n};\n  \nexport default viewListS3Item;","import { SELECT_S3_ITEM } from \"../constants/constants.js\";\nimport { ImagesList } from '../components/ImagesList.js';\n\nconst selectS3Item = (name) => {\n    return {\n        type: SELECT_S3_ITEM,\n        item: {\n            \"viewed\": true,\n            name: name\n        },\n        evaluate: function(items) {\n            var key = 0, stateCopy = null, stateDict = {};\n            for (var i = 0; i < items.length; i++) {\n                key = items[i];\n                stateCopy = ImagesList.stateData[key];\n                stateDict[key] = {\n                    \"image\": stateCopy[\"image\"],\n                    \"checked\": true,\n                    \"viewed\": stateCopy[\"viewed\"],\n                    \"drifted\": stateCopy[\"drifted\"]\n                };\n            }\n            return stateDict;\n        }\n    };\n};\n  \nexport default selectS3Item;","import { connect } from \"react-redux\";\nimport { ImagesList } from './../components/ImagesList.js';\nimport viewListS3Item from '../actions/viewListS3Item.js';\nimport selectS3Item from '../actions/selectS3Item.js';\n\nconst mapStateToProps = state => {\n    return {\n        imageState: state.imageState\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLoad: (name) => {\n            dispatch(viewListS3Item(name))\n        },\n        onSelect: (name) => {\n            dispatch(selectS3Item(name));\n        }\n    };\n};\n\nconst ListContainer = connect(mapStateToProps, mapDispatchToProps)(\n    ImagesList\n);\n\nexport default ListContainer;","import './App.css';\nimport ListContainer from './container/ListContainer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"row\">\n        <ListContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport { VIEW_LIST_S3_ITEM, SELECT_S3_ITEM } from \"../constants/constants.js\";\nimport { ImagesList } from '../components/ImagesList.js';\n\n// define the state in reducer\n\nconst imageState = (state = ImagesList.stateData, action) => {\n    switch(action.type) {\n        case VIEW_LIST_S3_ITEM:\n        case SELECT_S3_ITEM:\n            var stateDict = action.evaluate(action.item.name); // stateDict\n            return stateDict;\n            break;\n\n        default:\n            return {};\n            break;\n    }\n};\n\nconst reducer = combineReducers({\n    imageState\n});\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer.js';\n\nvar store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}